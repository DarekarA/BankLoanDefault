
R version 3.6.1 (2019-07-05) -- "Action of the Toes"
Copyright (C) 2019 The R Foundation for Statistical Computing
Platform: x86_64-w64-mingw32/x64 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> rm(list=ls())
> 
> setwd("C:/Users/Abhishek/Desktop/Bank_Loan_Edwisor/Bank_Loan_R")
> getwd()
[1] "C:/Users/Abhishek/Desktop/Bank_Loan_Edwisor/Bank_Loan_R"
> 
> #install.packages("doSNOW")
> #install.packages("rpart.plot")
> 
> #1. Set Environment and package load
> 
> x = c("ggplot2", "corrgram", "DMwR", "usdm", "caret", "randomForest", "e1071",
+       "DataCombine", "doSNOW", "inTrees", "rpart.plot", "rpart",'MASS','xgboost','stats','C50')
> 
> #load Packages
> lapply(x, require, character.only = TRUE)
Loading required package: ggplot2
Loading required package: corrgram
Registered S3 method overwritten by 'seriation':
  method         from 
  reorder.hclust gclus
Loading required package: DMwR
Loading required package: lattice

Attaching package: 'lattice'

The following object is masked from 'package:corrgram':

    panel.fill

Loading required package: grid
Registered S3 method overwritten by 'xts':
  method     from
  as.zoo.xts zoo 
Registered S3 method overwritten by 'quantmod':
  method            from
  as.zoo.data.frame zoo 
Loading required package: usdm
Loading required package: sp
Loading required package: raster
Loading required package: caret
Loading required package: randomForest
randomForest 4.6-14
Type rfNews() to see new features/changes/bug fixes.

Attaching package: 'randomForest'

The following object is masked from 'package:ggplot2':

    margin

Loading required package: e1071

Attaching package: 'e1071'

The following object is masked from 'package:raster':

    interpolate

Loading required package: DataCombine

Attaching package: 'DataCombine'

The following object is masked from 'package:raster':

    shift

Loading required package: doSNOW
Loading required package: foreach
Loading required package: iterators
Loading required package: snow
Loading required package: inTrees
Registered S3 method overwritten by 'RRF':
  method      from        
  plot.margin randomForest
Loading required package: rpart.plot
Loading required package: rpart
Loading required package: MASS

Attaching package: 'MASS'

The following objects are masked from 'package:raster':

    area, select

Loading required package: xgboost
Loading required package: C50
[[1]]
[1] TRUE

[[2]]
[1] TRUE

[[3]]
[1] TRUE

[[4]]
[1] TRUE

[[5]]
[1] TRUE

[[6]]
[1] TRUE

[[7]]
[1] TRUE

[[8]]
[1] TRUE

[[9]]
[1] TRUE

[[10]]
[1] TRUE

[[11]]
[1] TRUE

[[12]]
[1] TRUE

[[13]]
[1] TRUE

[[14]]
[1] TRUE

[[15]]
[1] TRUE

[[16]]
[1] TRUE

Warning messages:
1: package 'doSNOW' was built under R version 3.6.2 
2: package 'rpart.plot' was built under R version 3.6.2 
> 
> rm(x)
> 
> 
> #2. Load dataset and Data Pre Processing
> 
> bankloans=read.csv("bank-loan.csv")
> 
> str(bankloans)
'data.frame':	850 obs. of  9 variables:
 $ age     : int  41 27 40 41 24 41 39 43 24 36 ...
 $ ed      : int  3 1 1 1 2 2 1 1 1 1 ...
 $ employ  : int  17 10 15 15 2 5 20 12 3 0 ...
 $ address : int  12 6 14 14 0 5 9 11 4 13 ...
 $ income  : int  176 31 55 120 28 25 67 38 19 25 ...
 $ debtinc : num  9.3 17.3 5.5 2.9 17.3 10.2 30.6 3.6 24.4 19.7 ...
 $ creddebt: num  11.359 1.362 0.856 2.659 1.787 ...
 $ othdebt : num  5.009 4.001 2.169 0.821 3.057 ...
 $ default : int  1 0 0 0 1 0 0 0 1 0 ...
> summary(bankloans)
      age              ed            employ          address      
 Min.   :20.00   Min.   :1.000   Min.   : 0.000   Min.   : 0.000  
 1st Qu.:29.00   1st Qu.:1.000   1st Qu.: 3.000   1st Qu.: 3.000  
 Median :34.00   Median :1.000   Median : 7.000   Median : 7.000  
 Mean   :35.03   Mean   :1.711   Mean   : 8.566   Mean   : 8.372  
 3rd Qu.:41.00   3rd Qu.:2.000   3rd Qu.:13.000   3rd Qu.:12.000  
 Max.   :56.00   Max.   :5.000   Max.   :33.000   Max.   :34.000  
                                                                  
     income          debtinc         creddebt          othdebt        
 Min.   : 13.00   Min.   : 0.10   Min.   : 0.0117   Min.   : 0.04558  
 1st Qu.: 24.00   1st Qu.: 5.10   1st Qu.: 0.3822   1st Qu.: 1.04594  
 Median : 35.00   Median : 8.70   Median : 0.8851   Median : 2.00324  
 Mean   : 46.68   Mean   :10.17   Mean   : 1.5768   Mean   : 3.07879  
 3rd Qu.: 55.75   3rd Qu.:13.80   3rd Qu.: 1.8984   3rd Qu.: 3.90300  
 Max.   :446.00   Max.   :41.30   Max.   :20.5613   Max.   :35.19750  
                                                                      
    default      
 Min.   :0.0000  
 1st Qu.:0.0000  
 Median :0.0000  
 Mean   :0.2614  
 3rd Qu.:1.0000  
 Max.   :1.0000  
 NA's   :150     
> 
> #3. Checking for missing values
> missing_val=data.frame(apply(bankloans,2,function(x){sum(is.na(x))}))
> missing_val$Columns = row.names(missing_val) #new column "Columns" has values as all rows in the index
> names(missing_val)[1]="Missing_Percentage" #Rename 1st row name
> missing_val$Missing_Percentage = (missing_val$Missing_Percentage/nrow(bankloans)) * 100 #Convert data in missing percentage columns to actual percentages.
> missing_val = missing_val[order(-missing_val$Missing_Percentage),] #Order percentage in descending
> row.names(missing_val)=NULL
> missing_val = missing_val[,c(2,1)] #interchange missing percentage and column position
> # Only "default"	Column has missing values
> 
> 
> #4.1 Separate the numeric and categorical variable names 
> numeric_index = sapply(bankloans,is.numeric)
> numeric_data = bankloans[,numeric_index]
> numeric_data
    age ed employ address income debtinc  creddebt   othdebt default
1    41  3     17      12    176     9.3 11.359392  5.008608       1
2    27  1     10       6     31    17.3  1.362202  4.000798       0
3    40  1     15      14     55     5.5  0.856075  2.168925       0
4    41  1     15      14    120     2.9  2.658720  0.821280       0
5    24  2      2       0     28    17.3  1.787436  3.056564       1
6    41  2      5       5     25    10.2  0.392700  2.157300       0
7    39  1     20       9     67    30.6  3.833874 16.668126       0
8    43  1     12      11     38     3.6  0.128592  1.239408       0
9    24  1      3       4     19    24.4  1.358348  3.277652       1
10   36  1      0      13     25    19.7  2.777700  2.147300       0
11   27  1      0       1     16     1.7  0.182512  0.089488       0
12   25  1      4       0     23     5.2  0.252356  0.943644       0
13   52  1     24      14     64    10.0  3.929600  2.470400       0
14   37  1      6       9     29    16.3  1.715901  3.011099       0
15   48  1     22      15    100     9.1  3.703700  5.396300       0
16   36  2      9       6     49     8.6  0.817516  3.396484       1
17   36  2     13       6     41    16.4  2.918216  3.805784       1
18   43  1     23      19     72     7.6  1.181952  4.290048       0
19   39  1      6       9     61     5.7  0.563274  2.913726       0
20   41  3      0      21     26     1.7  0.099008  0.342992       0
21   39  1     22       3     52     3.2  1.154816  0.509184       0
22   47  1     17      21     43     5.6  0.587552  1.820448       0
23   28  1      3       6     26    10.0  0.431600  2.168400       0
24   29  1      8       6     27     9.8  0.402192  2.243808       0
25   21  2      1       2     16    18.0  0.241920  2.638080       1
26   25  4      0       2     32    17.6  2.140160  3.491840       0
27   45  2      9      26     69     6.7  0.707319  3.915681       0
28   43  1     25      21     64    16.7  0.951232  9.736768       0
29   33  2     12       8     58    18.4  3.084208  7.587792       0
30   26  3      2       1     37    14.2  0.204906  5.049094       0
31   45  1      3      15     20     2.1  0.105000  0.315000       0
32   30  1      1      10     22    10.5  1.138830  1.171170       0
33   27  3      2       7     26     6.0  0.722280  0.837720       0
34   25  1      8       4     27    14.4  1.018656  2.869344       0
35   25  1      8       1     35     2.9  0.077140  0.937860       0
36   26  2      6       7     45    26.0  6.048900  5.651100       0
37   30  2     10       4     22    16.1  1.409716  2.132284       0
38   32  2     12       1     54    14.4  3.195936  4.580064       0
39   28  2      1       8     24    17.1  1.337904  2.766096       1
40   45  1     23       5     50     4.2  0.558600  1.541400       0
41   23  1      7       2     31     6.6  0.337590  1.708410       0
42   34  1     17       3     59     8.0  1.807760  2.912240       0
43   42  2      7      23     41     4.6  0.941114  0.944886       0
44   39  1     19       5     48    13.1  1.930416  4.357584       0
45   26  1      0       0     14     7.5  0.302400  0.747600       1
46   21  2      0       1     16     6.8  0.150144  0.937856       0
47   35  1     13      15     35     4.5  0.431550  1.143450       0
48   47  1      4       2     26    10.4  0.121680  2.582320       0
49   23  2      0       2     21    11.4  0.775656  1.618344       1
50   35  1     18       2     42     7.4  0.205128  2.902872       0
51   34  1      2      11     25    12.6  0.573300  2.576700       1
52   46  1      1      12     20    14.0  0.809200  1.990800       0
53   46  1     16      18     52    12.9  3.032016  3.675984       1
54   38  3      3      18     25     3.7  0.311725  0.613275       0
55   40  2      3       2     28     9.5  0.553280  2.106720       0
56   37  1      1       3     24    15.1  1.801128  1.822872       1
57   35  1      9       1     34     5.0  0.397800  1.302200       0
58   39  2     16      13     69     2.4  1.061496  0.594504       0
59   40  3     18       6    100     2.5  1.485000  1.015000       0
60   50  3     10      20     80    12.2  2.479040  7.280960       0
61   31  1      9      10     28     2.4  0.047712  0.624288       0
62   29  1     13       1     42     7.4  1.457652  1.650348       1
63   37  1      4       0     23    12.4  0.869860  1.982140       0
64   33  2      4       9     55     7.0  2.159850  1.690150       0
65   26  2      5       7     28     7.8  1.024296  1.159704       0
66   32  2     11       6     75    23.3  7.758900  9.716100       1
67   28  2      2       3     23     6.4  0.186944  1.285056       1
68   39  1     19       8     46     9.1  2.515786  1.670214       0
69   28  2      8       3     31     8.2  1.492154  1.049846       1
70   29  1      1       2     20    18.6  0.569160  3.150840       1
71   34  2      3       8     21    23.1  1.401939  3.449061       0
72   28  2      5       9     34    23.8  3.099236  4.992764       0
73   47  1     26      21    100    12.8  4.582400  8.217600       0
74   43  4      1       5     26    10.6  1.518556  1.237444       0
75   41  1     13      10     44     1.7  0.071060  0.676940       0
76   47  1     13      25     51    23.8  3.738504  8.399496       0
77   24  1      2       1     21     0.6  0.025074  0.100926       0
78   29  1      1       9     17     6.7  0.157182  0.981818       0
79   33  1     14       2     37     2.6  0.199134  0.762866       0
80   36  1     15      10     39     3.2  0.686400  0.561600       0
81   26  1      4       3     27    10.5  2.472120  0.362880       1
82   31  1     11      12     45    17.0  2.738700  4.911300       0
83   37  1      7       3     32    19.6  2.696960  3.575040       0
84   35  4      4      16     29    11.0  1.843820  1.346180       0
85   26  1      4       3     20     5.4  0.318600  0.761400       0
86   40  1     10      15     45    18.8  2.013480  6.446520       0
87   29  2      5       4     36    12.4  3.490848  0.973152       1
88   37  3      5      17     29    24.6  1.405398  5.728602       0
89   32  1     12      12     28     2.9  0.116116  0.695884       0
90   23  2      0       1     17    27.7  2.043706  2.665294       1
91   32  1      3      10     23     6.2  0.052762  1.373238       0
92   25  1      1       6     15    11.4  0.371070  1.338930       1
93   38  1      5       5     54    10.6  1.499688  4.224312       0
94   32  2      0       6     18     5.8  0.296496  0.747504       1
95   41  3      2       0     15    26.3  1.960665  1.984335       1
96   36  1     17       6     54     4.4  0.727056  1.648944       0
97   42  3     13       0     82     3.3  1.315116  1.390884       0
98   41  1     14       8     52     7.3  0.926224  2.869776       0
99   29  2      4       9     19     6.3  0.681093  0.515907       0
100  38  3      4       6     31     9.3  1.331946  1.551054       1
101  39  1     22       9    113     2.6  0.987168  1.950832       0
102  36  1      6       9     26     8.3  0.030212  2.127788       0
103  33  1      8       7     27     5.8  0.776736  0.789264       0
104  42  2     21      11    121     3.1  1.365364  2.385636       0
105  41  2     22      17     75    23.6  9.876600  7.823400       0
106  40  1      8      17     28     3.6  0.534240  0.473760       0
107  53  1      9      18     50    11.2  2.016000  3.584000       1
108  28  1      4       7     26    13.5  1.295190  2.214810       0
109  36  2     12      13     60     7.9  1.720620  3.019380       0
110  34  2      9      13     45    10.1  1.118070  3.426930       0
111  45  3      2       5     39     4.9  0.458640  1.452360       0
112  38  1      6       0     41     8.9  0.266377  3.382623       0
113  21  3      0       2     24     7.7  0.833448  1.014552       0
114  42  1     12      11     51    21.4  2.411994  8.502006       0
115  52  1     16      25     64     8.6  1.865856  3.638144       0
116  25  2      4       6     33     5.2  0.552552  1.163448       0
117  34  2      9       9     65     6.2  2.107690  1.922310       0
118  40  2     15      16     73     3.4  1.032512  1.449488       0
119  31  2      0       4     27    12.8  1.088640  2.367360       1
120  25  1      1       0     20     6.7  0.471680  0.868320       1
121  45  1     12      19     37     9.5  1.342730  2.172270       0
122  23  1      3       0     19     8.4  0.279300  1.316700       1
123  34  4      6       3     27    35.3  1.982448  7.548552       1
124  31  1      2       4     22    12.7  1.092454  1.701546       1
125  28  1      5       9     22     2.8  0.140448  0.475552       0
126  41  1      7      11     43     4.4  0.694364  1.197636       0
127  39  2      7       2     68    13.0  1.016600  7.823400       1
128  29  2      9       3     36     1.4  0.127008  0.376992       0
129  21  1      5       1     25     9.0  0.366750  1.883250       0
130  41  2     19       2     68     5.8  1.506608  2.437392       0
131  26  4      1       7     27     2.9  0.311634  0.471366       0
132  33  1      5      10     18    12.9  0.984528  1.337472       0
133  45  2     18      19     35    17.4  0.548100  5.541900       0
134  39  1     17      20     60    13.7  2.449560  5.770440       0
135  24  1      7       2     21     6.3  0.519939  0.803061       0
136  29  2      6       7     57     2.2  0.452694  0.801306       0
137  27  2      1       0     23    12.4  0.285200  2.566800       0
138  40  1     13       2     28     5.9  0.964768  0.687232       0
139  29  1      8      10     24     6.7  0.469536  1.138464       0
140  29  2      4       3     37     6.6  1.159950  1.282050       1
141  24  1      0       2     16    16.0  1.008640  1.551360       1
142  27  1      9       6     45    17.8  2.851560  5.158440       1
143  41  3     16      22    135     4.4  1.277100  4.662900       0
144  31  1     11       8     25     9.1  0.141050  2.133950       0
145  41  1     16      17     68     5.4  0.447984  3.224016       0
146  42  2      5       3     41     3.4  0.355470  1.038530       0
147  28  4      1       3     26    12.4  0.377208  2.846792       0
148  30  4      2       8     25    10.0  1.770000  0.730000       0
149  30  1     11       1     33     8.4  0.681912  2.090088       0
150  31  1      8       4     44     8.0  1.721280  1.798720       0
151  45  2     15      14     51    18.1  1.550808  7.680192       0
152  43  1     13      23     76     6.1  2.151104  2.484896       1
153  36  1      4      10     23    16.3  1.327146  2.421854       0
154  28  1      8       6     30     7.2  0.613440  1.546560       0
155  27  2      3       5     33    13.2  1.633500  2.722500       0
156  36  3     13       3     39    19.2  2.800512  4.687488       0
157  33  1     12      11     32    11.3  2.104512  1.511488       0
158  54  1      9       2     28    14.8  1.558144  2.585856       1
159  33  1      9       4     29    13.8  1.348674  2.653326       1
160  31  1      9       5     26     4.5  0.310050  0.859950       0
161  21  1      4       0     26     8.9  1.420796  0.893204       0
162  28  3      5       9     44     8.7  0.773256  3.054744       0
163  31  2      2       1     26     6.8  0.282880  1.485120       1
164  32  1      8       6     26     4.1  0.326196  0.739804       0
165  35  2      1       8     24    12.5  0.591000  2.409000       1
166  40  2     13      11    102    18.9  6.226794 13.051206       1
167  22  1      4       2     24    15.6  1.636128  2.107872       1
168  39  1      4       9     38     6.5  1.178190  1.291810       0
169  41  4     14       3     44     1.7  0.353056  0.394944       0
170  34  1     16       9     79     4.0  1.734840  1.425160       0
171  29  1      7       9     22     9.7  0.550572  1.583428       0
172  31  1      4      10     28    11.3  0.291088  2.872912       0
173  32  1      1       0     20     4.8  0.314880  0.645120       1
174  32  1     14       7     73     8.8  3.751616  2.672384       0
175  33  1      6      14     21     7.5  0.567000  1.008000       0
176  26  1      6       0     22    10.3  0.720588  1.545412       0
177  21  1      1       1     18    17.3  0.158814  2.955186       0
178  28  2      7       2     34     7.0  0.359380  2.020620       0
179  37  1     13       5     24     8.9  0.602352  1.533648       0
180  33  2      2      14     35    22.9  2.123975  5.891025       1
181  39  1     12      10     46     5.0  0.561200  1.738800       0
182  40  2      8      19     57     5.6  0.877800  2.314200       0
183  45  3     16      21     80     3.0  0.912000  1.488000       0
184  27  1     10       6     34     6.5  0.850850  1.359150       0
185  28  4      0       7     29    24.2  1.424654  5.593346       0
186  39  1     13       9     27     8.0  0.965520  1.194480       0
187  40  1     14      21     43    15.0  2.792850  3.657150       1
188  27  1     11       8     56    16.9  4.637360  4.826640       0
189  36  1      1       4     16     9.3  0.433008  1.054992       0
190  55  1     19       2     78    15.6  4.404816  7.763184       0
191  27  2      4       3     22    13.2  1.086096  1.817904       1
192  30  1      1       8     17    11.0  0.746130  1.123870       0
193  36  1     10       0     28    11.2  0.815360  2.320640       1
194  31  1      1       6     21     2.5  0.277200  0.247800       1
195  33  2     13       2     40     7.2  0.181440  2.698560       0
196  30  1      4       0     33     4.2  0.500346  0.885654       0
197  24  1      1       0     18     5.9  0.238950  0.823050       1
198  33  4      9      10     28     4.3  0.376852  0.827148       0
199  50  1      8      27     47     6.9  0.398889  2.844111       0
200  31  2      6       6     32    23.1  3.341184  4.050816       1
201  28  1      3       7     19     4.1  0.260965  0.518035       0
202  44  3      8      10     88     6.1  0.284504  5.083496       1
203  48  4      3      23     45     9.8  0.974610  3.435390       0
204  36  2      0      17     30     9.7  0.328830  2.581170       0
205  29  3      7       1     63     5.5  0.571725  2.893275       0
206  40  3     17      11    116     6.0  2.561280  4.398720       0
207  33  1      7       6     26     6.0  0.542880  1.017120       0
208  26  2      6       6     30     1.0  0.143700  0.156300       0
209  36  1     14      11     81     7.2  1.784592  4.047408       0
210  26  2      6       0     35     1.9  0.085785  0.579215       0
211  40  3     16       6    116    12.1  1.614140 12.421860       0
212  44  1      5       3     48     9.0  1.969920  2.350080       1
213  29  3      1      10     30     4.5  0.279450  1.070550       0
214  35  3      5       3     37     5.4  0.581418  1.416582       1
215  34  1     16       3     75    10.4  3.954600  3.845400       0
216  34  3     12       8     47     6.7  1.300537  1.848463       0
217  46  1     14      25     35    10.2  1.349460  2.220540       0
218  41  2     21      22    145    12.2  3.237270 14.452730       0
219  27  2      7       8     30     4.0  0.447600  0.752400       1
220  27  4      0       6     70     8.0  1.618400  3.981600       1
221  28  1     11       6     24     2.4  0.107136  0.468864       0
222  48  3      0      27     19    10.8  0.849528  1.202472       0
223  48  3     17      26    113    12.0  3.376440 10.183560       0
224  29  3      5       6     70    19.9  3.176040 10.753960       1
225  43  2      9       5     60    20.4  4.039200  8.200800       1
226  23  1      5       2     17     7.9  0.302175  1.040825       0
227  29  2     10       8     44    18.1  3.703260  4.260740       0
228  40  4      5       6     75     1.9  0.884925  0.540075       0
229  22  2      0       3     20     5.6  0.207200  0.912800       0
230  23  1      7       3     22    14.4  0.849024  2.318976       0
231  46  3      9      10     60    15.3  1.606500  7.573500       0
232  55  1      3      11     40     8.0  0.563200  2.636800       1
233  38  2      8      16     38     0.6  0.029412  0.198588       0
234  35  2      5       1     33     2.8  0.103488  0.820512       0
235  30  1     11       9     27     0.9  0.073872  0.169128       0
236  24  1      7       0     18     6.5  0.526500  0.643500       0
237  26  2      4       3     28     9.5  0.226100  2.433900       0
238  32  2      2      11     15     9.1  0.118755  1.246245       1
239  37  2     11       4     75     3.5  0.632625  1.992375       0
240  39  1      6      19     42    19.9  2.540832  5.817168       1
241  30  2      4       4     21    18.3  0.491904  3.351096       0
242  30  1     10      11     39     9.5  2.056275  1.648725       0
243  32  2      7      10     32     4.3  0.433440  0.942560       0
244  54  3     21      20    118    14.4  9.600480  7.391520       0
245  27  3      3       4     35    13.3  1.601320  3.053680       0
246  31  1     12       4     31    23.7  2.057160  5.289840       0
247  39  1     15      16     39     1.8  0.139698  0.562302       0
248  31  1      5       3     25    14.1  1.177350  2.347650       0
249  35  1     15      11     40    18.5  1.213600  6.186400       0
250  35  2     10      16     98    13.3  4.874716  8.159284       0
251  46  2     22      17    144    11.1  3.324672 12.659328       0
252  33  1     13       3     52    21.3  2.713620  8.362380       1
253  35  2     13       3    105     1.9  1.418445  0.576555       0
254  35  2      1       1     21     7.9  0.369957  1.289043       0
255  38  1      5      13     21     9.0  0.449820  1.440180       0
256  41  1     19       1     96     7.8  2.253888  5.234112       0
257  38  1     18      19     44     4.5  0.605880  1.374120       0
258  34  3      2      14     39    13.2  1.142856  4.005144       0
259  51  3     16      25     82     4.4  2.604976  1.003024       0
260  34  2     10       2     33     9.5  0.573705  2.561295       0
261  47  1     15       1     30    24.5  2.212350  5.137650       0
262  34  2      8       6     78     5.4  2.156544  2.055456       0
263  27  2      8       7     18    11.9  0.400554  1.741446       0
264  52  1      9      11     24    19.2  0.801792  3.806208       1
265  39  1      9       6     35     5.0  0.232750  1.517250       0
266  33  1      7       0     22     6.4  0.630784  0.777216       0
267  34  1      0       1     21     7.2  0.187488  1.324512       0
268  31  3      9       7     59    14.6  3.109654  5.504346       1
269  28  1      2       9     16    15.2  0.870656  1.561344       0
270  39  1     19      16     45     3.7  0.915750  0.749250       0
271  51  2     22      23    120     7.6  4.140480  4.979520       0
272  22  1      4       1     16     1.2  0.084480  0.107520       0
273  27  3      6       4     26    10.4  0.930176  1.773824       0
274  32  1     16      10     38    21.0  0.694260  7.285740       0
275  28  2      6       7     38     7.2  0.774288  1.961712       0
276  27  2      1       0     20    10.3  0.376980  1.683020       1
277  26  2      2       6     24    13.6  1.576512  1.687488       1
278  32  1     14       0     36     2.4  0.273024  0.590976       0
279  30  1      0      11     17     3.7  0.446590  0.182410       1
280  39  1     13       1     38     8.9  1.897302  1.484698       0
281  31  1     11       6     28     4.8  0.345408  0.998592       1
282  34  1     15       2     39    24.7  4.373382  5.259618       1
283  31  1      8       3     41    12.6  0.134316  5.031684       0
284  29  2      1       7     25    10.4  0.569400  2.030600       0
285  29  1      9       0     25    13.9  1.070300  2.404700       0
286  35  2      9      16     30     7.6  0.649800  1.630200       0
287  29  1     11       7     32     6.0  0.927360  0.992640       0
288  38  2      2      16     22    22.7  1.208548  3.785452       1
289  35  1     16      15     36     3.4  0.178704  1.045296       0
290  29  1     11       5     36     6.1  0.709308  1.486692       0
291  23  2      3       4     34     4.4  0.261800  1.234200       0
292  33  4      9       8     32     5.5  0.496320  1.263680       0
293  51  2     19      25    159     2.8  1.068480  3.383520       0
294  24  1      4       2     21     2.6  0.099372  0.446628       0
295  31  1     10      12     49     9.8  3.236548  1.565452       1
296  45  1     10      14     52     5.4  0.932256  1.875744       0
297  29  1      3       1     17     9.0  0.469710  1.060290       0
298  34  1      0      10     20    17.1  2.048580  1.371420       0
299  25  2      4       5     27     5.0  0.549450  0.800550       1
300  37  1     20       2     56     1.9  0.542640  0.521360       0
301  47  1     29      18    129    25.3 20.561310 12.075690       1
302  43  2      6      24     54     9.6  0.622080  4.561920       0
303  47  1     22      19     81     5.5  1.505790  2.949210       0
304  24  1      6       2     21     5.2  0.108108  0.983892       0
305  27  3      5       1     75     6.3  2.206575  2.518425       0
306  25  1      9       4     18     1.2  0.065880  0.150120       0
307  36  3     11      12     44    14.7  0.446292  6.021708       0
308  39  1     16      20     57    19.4  1.559178  9.498822       0
309  26  1     10       1     25     7.1  1.306400  0.468600       0
310  41  1      4      19     25    10.1  1.060500  1.464500       0
311  39  1     19      15     60    27.1  9.593400  6.666600       1
312  37  1     18       8     54    12.1  4.593402  1.940598       0
313  29  1      2       0     14    14.4  0.586656  1.429344       1
314  42  1      6       9     31    11.6  1.024860  2.571140       0
315  31  4      1       6     29    11.1  1.065489  2.153511       0
316  36  1      4      15     17    17.3  0.520557  2.420443       0
317  39  1     16       4     52    20.0  4.160000  6.240000       0
318  23  4      0       2     23     6.7  0.468464  1.072536       0
319  39  1      4      15     33     7.0  0.397320  1.912680       0
320  27  3      4       1     40     3.1  0.283960  0.956040       1
321  24  1      8       4     24     5.0  0.381600  0.818400       0
322  27  3      3       4     45    11.0  0.292050  4.657950       1
323  41  1     16      22     49     1.6  0.431200  0.352800       0
324  38  1      0       8     23     8.1  0.897966  0.965034       1
325  40  2      5      12     35    16.4  1.584240  4.155760       1
326  54  1     25      12    120    26.5 14.596200 17.203800       1
327  40  1     12       6     89    17.4  2.771994 12.714006       0
328  40  1      2       4     32     3.7  0.853664  0.330336       0
329  29  1      1       8     31     8.0  0.156240  2.323760       0
330  30  1      8       6     23    12.0  0.761760  1.998240       0
331  29  1      1       1     18     1.1  0.029898  0.168102       0
332  29  3      3       3     50     2.4  0.259200  0.940800       1
333  28  4      2       4     41     2.5  0.459200  0.565800       1
334  28  4      0       5     38    10.4  0.636272  3.315728       0
335  39  2     16       9     89    14.3  5.001711  7.725289       0
336  32  1     11       2     53     3.3  0.089199  1.659801       0
337  36  2      7      16     43    15.4  2.648800  3.973200       0
338  39  1     20      12     39     8.2  0.773916  2.424084       0
339  28  3      6       8     47    19.8  5.574294  3.731706       1
340  28  1      4       2     28    14.2  0.437360  3.538640       1
341  46  1      6      19     31    12.2  1.985550  1.796450       0
342  30  2      4       8     15     6.5  0.350025  0.624975       0
343  39  2     15      19     32     4.9  0.421792  1.146208       0
344  40  3      5       3    220    16.0  8.166400 27.033600       1
345  44  2     18       4     74    13.4  4.521696  5.394304       0
346  30  1      0       8     19    16.6  0.624492  2.529508       1
347  24  2      3       0     19     4.3  0.358663  0.458337       0
348  32  1     10      13     32    11.3  1.167968  2.448032       0
349  29  2      3       8     15     2.6  0.146640  0.243360       0
350  40  2      2       1     36     3.8  0.277704  1.090296       0
351  41  2      8      21     43     0.7  0.085785  0.215215       0
352  22  1      1       3     17    18.6  0.806310  2.355690       0
353  38  1     10       8     34     1.2  0.036312  0.371688       0
354  37  2      6      13     62     8.5  1.185750  4.084250       0
355  41  3     18       6     71    15.7  6.565583  4.581417       1
356  41  3      7       6     56    14.5  0.373520  7.746480       1
357  39  1      2      15     22    23.1  1.915914  3.166086       1
358  24  2      0       2     15    16.1  0.321195  2.093805       1
359  32  3      9      10     51    23.0  2.686170  9.043830       0
360  21  3      0       1     26     7.7  1.529528  0.472472       0
361  29  1     13       7     27     2.3  0.068931  0.552069       0
362  35  2     14       3     82     0.8  0.468384  0.187616       0
363  29  1      6       7     21    18.1  1.109892  2.691108       0
364  41  2      2      22     30     6.7  0.112560  1.897440       0
365  37  1      0      18     18    12.9  1.583604  0.738396       1
366  32  2      3      13     47     1.9  0.428640  0.464360       0
367  36  5      5      12     20     8.1  0.729000  0.891000       0
368  39  2     18       9     44     2.1  0.367752  0.556248       0
369  36  1     18       9     67    11.2  5.245296  2.258704       0
370  46  3     22       4     99     2.3  0.826551  1.450449       0
371  34  1     13      11     51     9.6  1.875168  3.020832       0
372  27  1      7       4     26     9.1  0.641186  1.724814       0
373  43  1      8      11     45     3.3  0.677160  0.807840       0
374  33  1     14       8     72    41.3 15.016680 14.719320       1
375  39  2     20      17    101     1.4  0.340774  1.073226       0
376  29  1      1       4     17     2.5  0.131750  0.293250       0
377  34  4      7      15     40     6.4  0.949760  1.610240       0
378  26  1      1       0     21     4.9  0.608139  0.420861       0
379  31  1     15       2     60     4.8  0.803520  2.076480       0
380  26  1     10       6     24     2.7  0.311040  0.336960       0
381  28  1     12       7     45     7.7  1.853775  1.611225       0
382  48  1     13      20     50    30.8  6.113800  9.286200       1
383  39  2      2      12     46    16.0  4.003840  3.356160       1
384  37  1      3       3     25     3.7  0.275650  0.649350       0
385  52  5      9       0     70     9.4  1.329160  5.250840       1
386  48  1      3      11     27    21.3  1.403244  4.347756       0
387  26  1      7       3     22     5.1  0.208692  0.913308       0
388  46  5     15       0    126     3.1  0.476532  3.429468       0
389  31  1      7      10     23     4.9  0.225400  0.901600       0
390  34  1     13       8     56     6.1  0.864248  2.551752       0
391  40  1     22       4     95     3.6  0.632700  2.787300       0
392  24  3      2       5     16     6.4  0.270336  0.753664       1
393  33  1      2      14     44     3.1  0.525140  0.838860       0
394  53  4      5      29     78    17.3  6.935916  6.558084       1
395  47  3      9       1     52    20.1  2.539836  7.912164       1
396  35  1      5       5     32    13.0  0.174720  3.985280       0
397  34  1     14       8     28    17.0  1.137640  3.622360       0
398  49  1     11       5     39    10.1  2.457936  1.481064       0
399  26  2      0       7     28     9.3  1.270752  1.333248       0
400  23  1      2       2     16     9.6  0.804864  0.731136       1
401  23  2      0       4     21     8.7  0.454923  1.372077       0
402  38  2      4      13     56     1.6  0.441728  0.454272       0
403  28  2      5       2     37     8.3  1.123986  1.947014       0
404  30  3      0       8     65    29.7  3.899610 15.405390       1
405  34  1     18      10     34    15.4  2.099636  3.136364       0
406  50  2     16      14     71    11.1  1.662891  6.218109       0
407  29  1     12       2     40     6.7  1.632120  1.047880       0
408  42  3      0       9     64     6.6  0.278784  3.945216       0
409  31  1     13      12     27     5.0  0.237600  1.112400       0
410  39  1     10       4     31     4.8  0.184512  1.303488       0
411  45  2     21      26    132     3.0  2.558160  1.401840       0
412  45  1     22      24     91    11.7  1.256346  9.390654       0
413  36  1     14      17     53     5.7  1.888125  1.132875       0
414  25  4      0       6     24    12.1  1.597200  1.306800       1
415  29  2      1       7     29    21.2  2.330092  3.817908       1
416  30  2      8       4     56     6.4  0.333312  3.250688       0
417  31  1      1       1     24     4.5  0.217080  0.862920       0
418  43  1      4       2     29     4.6  0.053360  1.280640       0
419  32  2     11       4     57    23.8  5.439966  8.126034       1
420  47  1     19       7     50    30.1  3.175550 11.874450       0
421  46  1      1      15     21    14.8  1.376844  1.731156       1
422  43  2     16      10     83     4.1  0.258628  3.144372       0
423  48  1      3       7     24     7.0  0.764400  0.915600       0
424  30  3      8       7     61     2.8  0.549976  1.158024       0
425  23  4      0       4     32    18.4  0.818432  5.069568       1
426  36  4      8       0     32     1.6  0.024576  0.487424       0
427  20  3      0       1     17     2.3  0.043792  0.347208       0
428  43  1     16       7     89     0.4  0.159488  0.196512       0
429  23  1      2       1     25     4.5  0.123750  1.001250       1
430  41  1     21       2     76    20.5  6.948680  8.631320       0
431  34  1     12       5     68    25.1  7.817144  9.250856       1
432  50  1     11       5     36     4.8  0.834624  0.893376       0
433  40  1      9       4     64     6.6  0.789888  3.434112       0
434  29  2      0       8     22    12.9  1.038708  1.799292       1
435  39  2      9      16     56    18.7  4.764760  5.707240       0
436  24  2      1       2     42     5.7  0.837900  1.556100       0
437  27  1      0       5     16     1.1  0.130416  0.045584       0
438  40  3     18      14    157     6.6  3.326202  7.035798       0
439  32  2      8       2     45     3.7  0.982350  0.682650       0
440  39  2     16      12     53     3.7  0.694194  1.266806       0
441  40  1     22       1    100    14.6  5.402000  9.198000       0
442  32  1     10      11     42     9.1  1.540266  2.281734       0
443  39  1     23       1     75    18.9  3.132675 11.042325       0
444  24  1      3       3     21    28.9  2.682498  3.386502       1
445  43  4     18      14    446     6.5 16.031470 12.958530       1
446  56  1     11      20     59    15.0  4.672800  4.177200       0
447  32  3      5       9     23     4.5  0.326025  0.708975       0
448  42  1      7      12     25    10.2  1.629450  0.920550       0
449  46  3      3      13     43    13.2  3.042336  2.633664       1
450  31  1      2       2     22    16.4  1.739056  1.868944       1
451  43  1     25      16    242     2.6  1.635920  4.656080       0
452  28  2      6       9     22    11.5  0.650210  1.879790       0
453  39  3     11      17     39    12.9  2.560779  2.470221       0
454  39  1      0       8     39     7.9  1.066026  2.014974       0
455  37  4      1      14     33    16.1  2.693691  2.619309       1
456  30  1      0      11     17    12.0  0.303960  1.736040       0
457  37  5      9      16    177     5.9  0.887655  9.555345       0
458  22  1      4       3     14    17.5  0.225400  2.224600       0
459  50  1      1      26     26    14.3  1.851564  1.866436       0
460  30  1     10       2     19     4.4  0.336072  0.499928       0
461  39  1      8       0     21     4.0  0.276360  0.563640       0
462  21  2      0       2     21    12.5  0.488250  2.136750       1
463  31  3      9       2     28     2.6  0.121576  0.606424       0
464  31  2      9       1     30     5.8  0.602040  1.137960       0
465  48  1      0      23     30    22.3  2.662620  4.027380       0
466  28  1      4       1     16    23.8  1.085280  2.722720       0
467  47  3     16      26    221    17.6 15.791776 23.104224       1
468  27  2      6       1     34     4.4  0.237864  1.258136       0
469  29  2      6      10     65    18.4  1.985360  9.974640       0
470  21  2      2       0     20     4.5  0.290700  0.609300       1
471  29  1      7       5     20    19.8  1.005840  2.954160       1
472  24  4      0       3     29     6.6  0.589512  1.324488       1
473  44  1     12       3     31     9.7  0.357833  2.649167       0
474  22  1      1       0     18     4.4  0.270072  0.521928       0
475  38  2     13       0     59     2.4  0.407808  1.008192       0
476  52  2     12      16     76     7.7  0.994840  4.857160       0
477  25  1      3       2     18    16.3  0.352080  2.581920       1
478  25  1      5       5     22    10.9  0.402864  1.995136       0
479  51  2     27      21    166    11.5  0.820870 18.269130       0
480  38  1     21      16     58    16.5  4.584030  4.985970       0
481  44  1      9      20     33     5.2  0.545688  1.170312       0
482  24  2      2       3     26     9.7  0.887744  1.634256       1
483  34  1      5       3     33     7.3  0.778107  1.630893       0
484  25  2      6       2     26     4.5  0.070200  1.099800       0
485  45  3      5      17     94    10.5  3.612420  6.257580       1
486  34  2      4      10     25     5.8  0.569850  0.880150       0
487  27  4      2       8     23     5.7  0.319884  0.991116       1
488  33  2     10      13     57    20.9  6.111369  5.801631       1
489  35  2      0      16     22    15.0  1.970100  1.329900       1
490  50  2     15      31     60     1.1  0.467940  0.192060       0
491  33  1     13      13     42     3.6  0.228312  1.283688       0
492  41  3     13      13     91    25.2  2.316132 20.615868       1
493  28  1      0       2     28    33.3  2.284380  7.039620       1
494  38  3     12      14     63    16.0  5.715360  4.364640       1
495  25  1      3       2     16    17.8  1.011040  1.836960       1
496  47  2      4       9     33     7.1  1.194930  1.148070       1
497  30  2     12       9     98     7.2  2.935296  4.120704       0
498  44  2     12       5     86    13.0  1.475760  9.704240       0
499  25  1      0       2     18    18.9  0.513702  2.888298       1
500  41  2      6       0     36    19.5  4.513860  2.506140       1
501  22  3      0       1     18     7.7  0.478170  0.907830       0
502  35  2      3      11     40    17.2  1.802560  5.077440       1
503  42  5      6      23    190     7.8  3.156660 11.663340       0
504  38  1      3      19     23    14.7  0.831726  2.549274       0
505  23  2      1       3     18    18.7  0.885258  2.480742       1
506  28  3      2       5     30    19.9  1.522350  4.447650       0
507  52  1     19      25     89     4.7  0.397385  3.785615       0
508  25  1      9       2     20     3.5  0.105000  0.595000       0
509  28  2      1       4     16    14.7  0.573888  1.778112       0
510  43  1     19      11     79     7.5  0.782100  5.142900       0
511  24  2      3       1     24    19.1  2.172816  2.411184       0
512  34  3     13       7     52     9.2  1.497392  3.286608       0
513  29  2      6       9     25     4.2  0.584850  0.465150       0
514  31  1      6       9     21     8.3  0.728574  1.014426       0
515  42  2     14       1     48     8.6  1.201248  2.926752       1
516  49  2     11       1     51    15.0  0.543150  7.106850       0
517  39  1     22       9     73    14.3  3.726723  6.712277       0
518  45  3      0      19     22     4.2  0.030492  0.893508       0
519  41  1      7      22     32     2.9  0.072384  0.855616       0
520  29  2      9       0     46     1.6  0.241408  0.494592       0
521  35  3      7       5     38    15.1  1.382858  4.355142       0
522  27  2      5       6     25     6.8  0.705500  0.994500       0
523  28  1      4       7     19     4.1  0.286672  0.492328       0
524  48  1     17      22     66     3.2  1.467840  0.644160       0
525  24  1      2       5     18     6.0  0.528120  0.551880       0
526  31  1      6      12     33     4.2  0.145530  1.240470       0
527  43  1     10       9     69     6.4  0.410688  4.005312       0
528  42  1      3      10     24    10.6  0.666528  1.877472       0
529  51  2     31      14    249     7.8  4.272840 15.149160       0
530  22  1      4       3     19    23.1  1.887270  2.501730       1
531  37  1      6      10     31    11.7  1.701063  1.925937       1
532  22  3      1       3     25    13.8  1.976850  1.473150       1
533  49  2      2      13     20    16.9  0.378560  3.001440       1
534  29  1      9       8     30     8.2  0.154980  2.305020       0
535  42  1      2      16     30     9.7  1.472460  1.437540       0
536  34  1     15       0     67    13.2  3.741012  5.102988       0
537  34  2      9       7     27     1.7  0.295137  0.163863       0
538  32  2      5       5     43    15.0  1.806000  4.644000       1
539  42  2     18      23     66     9.6  1.641024  4.694976       0
540  24  1      3       0     14    16.1  0.838488  1.415512       1
541  34  1     16       9     48     7.6  1.473792  2.174208       0
542  26  1     10       2     32     4.7  0.126336  1.377664       0
543  30  2     12       9     68    20.1  2.856612 10.811388       0
544  32  1      4       3     16    28.5  0.893760  3.666240       1
545  38  3     13      18     25     5.7  0.343425  1.081575       0
546  43  2     10      24     37     8.5  0.676175  2.468825       0
547  31  2      9       8     53    13.5  1.194885  5.960115       0
548  37  4     10      18    123    17.3  3.021618 18.257382       0
549  37  2      4      11     20    21.7  0.173600  4.166400       1
550  41  3     12      11     86    26.5  4.991010 17.798990       1
551  32  1      0       4     20     3.0  0.263400  0.336600       1
552  22  2      0       1     35     9.0  0.781200  2.368800       1
553  32  2     12       3     63    18.2  5.549544  5.916456       0
554  47  2     17      23     41     9.5  0.455715  3.439285       0
555  40  1     21      21     46     6.2  0.966828  1.885172       0
556  31  1      8       1     22     6.7  0.369974  1.104026       0
557  34  3      7       0     27     2.2  0.125334  0.468666       0
558  52  4     13      17    234     7.7  7.387380 10.630620       0
559  28  1      2       2     17     2.5  0.199325  0.225675       1
560  38  3     15      18     63    13.4  5.090526  3.351474       0
561  33  2     10       4     26     3.1  0.030628  0.775372       0
562  39  2      9      12     32     6.6  1.429824  0.682176       0
563  47  3     23      11    115     4.0  0.653200  3.946800       0
564  36  2     11       8     49     1.3  0.272636  0.364364       0
565  29  3      7       2     84    13.6  6.911520  4.512480       1
566  48  4     14      10     59    16.5  4.935645  4.799355       1
567  38  3     12      18     64     5.8  0.894592  2.817408       0
568  46  2      9      26     15     4.3  0.014835  0.630165       0
569  27  3      5       4     42    19.9  2.707992  5.650008       1
570  54  1     18      34    114     8.5  3.294600  6.395400       0
571  27  4      0       0     25    12.7  1.419225  1.755775       1
572  23  1      1       0     17     1.6  0.011696  0.260304       0
573  41  1     23       2     91    13.7  0.573482 11.893518       0
574  24  1      3       5     15    11.3  0.072885  1.622115       1
575  28  1      9       0     22    27.7  5.283498  0.810502       1
576  26  1      0       0     14    10.5  0.255780  1.214220       0
577  24  1      8       0     17     5.6  0.569296  0.382704       1
578  49  2     22       4     79     7.3  0.288350  5.478650       0
579  28  2      3       1     36     8.6  0.383904  2.712096       0
580  38  1      6      17     18    13.0  0.131040  2.208960       0
581  33  2      2       9     37     4.5  0.834165  0.830835       0
582  26  1      8       4     25     4.7  0.210325  0.964675       0
583  36  1      9       1     40     9.8  1.975680  1.944320       0
584  37  3     16      14     50    36.6  7.320000 10.980000       1
585  25  4      0       1     18    33.4  2.801592  3.210408       1
586  29  1      9       2     33     4.8  0.693792  0.890208       0
587  27  2      8       4     38     6.9  0.364458  2.257542       0
588  45  1     17       0     62    15.0  2.436600  6.863400       0
589  37  1      9       8     57     5.5  1.357455  1.777545       0
590  29  2      3       6     26     6.1  0.537654  1.048346       1
591  51  1     10       1     44    13.2  4.960032  0.847968       1
592  22  3      0       0     23     8.4  0.372876  1.559124       1
593  30  4      7      10     30    15.7  0.263760  4.446240       0
594  31  1      7       2     20    12.3  0.110700  2.349300       0
595  28  1      2       0     18    14.8  1.939392  0.724608       1
596  35  1     10      16     39     5.7  0.217854  2.005146       0
597  25  4      1       1     34     8.5  0.132940  2.757060       1
598  32  2      5       0     28    14.8  2.594144  1.549856       1
599  33  1      2      10     24     9.6  1.041408  1.262592       0
600  28  2      3       4     41    25.1  5.896743  4.394257       1
601  46  3      4      17     73     5.4  2.223288  1.718712       0
602  41  1     24      12     83    14.0  6.588540  5.031460       0
603  42  2     11       5     73     6.8  2.869192  2.094808       0
604  41  4      9      13     47     5.0  0.437100  1.912900       0
605  26  1      3       5     29    25.7  2.526567  4.926433       1
606  47  1     27       8    113     9.2  2.380684  8.015316       0
607  29  1      1       3     18    25.6  1.981440  2.626560       1
608  34  1      3      14     36     4.7  0.624348  1.067652       0
609  36  1      7       2     43     6.2  1.039740  1.626260       0
610  38  2      7       4     64     3.0  0.650880  1.269120       0
611  41  2      4      14     26    19.2  1.472640  3.519360       1
612  46  1      9      23     31    13.8  1.617084  2.660916       0
613  40  3      3      15     55    16.5  1.751475  7.323525       1
614  44  2     17       0    129     2.5  0.551475  2.673525       0
615  35  3     10      15     39    10.4  1.602120  2.453880       0
616  36  1     20      15     60     5.4  1.056240  2.183760       0
617  28  2      0       3     30     4.8  0.120960  1.319040       1
618  29  2      6       7     18     5.1  0.449820  0.468180       1
619  23  2      3       3     22    11.4  1.274064  1.233936       1
620  41  2      7      17     63    15.4  4.637556  5.064444       0
621  25  1      1       1     19     6.9  0.190095  1.120905       0
622  45  2      2      19     29     5.4  0.443178  1.122822       0
623  48  2     30      14    148     7.2  3.974688  6.681312       0
624  38  1     18       7     45     7.0  0.535500  2.614500       0
625  29  1      6       4     46     5.4  1.169964  1.314036       0
626  42  4     15       8    186     3.6  2.403864  4.292136       0
627  31  1     11      12     47    10.9  2.863757  2.259243       0
628  40  1      3      13     23     6.9  0.409446  1.177554       0
629  26  1      2       6     21    19.8  1.022868  3.135132       0
630  25  1      6       6     22    20.2  2.261996  2.182004       0
631  53  4      7      11     61     7.9  1.874591  2.944409       0
632  50  3     18      27    102    14.1  5.781564  8.600436       0
633  47  1     31       9    136    23.1 14.231448 17.184552       1
634  23  1      1       0     21     8.4  1.210104  0.553896       1
635  37  3     12       8     83     4.1  0.319882  3.083118       0
636  41  1     24      15    100    11.5  5.060000  6.440000       0
637  28  2      0       7     29    13.3  2.148349  1.708651       1
638  31  1      7      11     41    30.7  2.995706  9.591294       1
639  41  2      6       1     19     6.3  0.124488  1.072512       0
640  36  1      7      17     40     9.9  1.694880  2.265120       0
641  41  1      1      16     19     4.4  0.241604  0.594396       0
642  53  2     16      31     44     5.6  1.333024  1.130976       0
643  31  2      6       5     25    11.5  2.331625  0.543375       0
644  28  2      5       6     25     2.9  0.338575  0.386425       0
645  48  1     28      25     70    12.0  4.334400  4.065600       0
646  23  2      0       1     42     3.9  1.018836  0.619164       1
647  31  1     11       6     34     6.8  0.298248  2.013752       0
648  27  1      6       6     43     4.9  0.882833  1.224167       0
649  43  1     11      17     37     1.3  0.179894  0.301106       0
650  29  2      5       7     28    18.7  2.125816  3.110184       0
651  53  1      6       7     27     6.4  0.594432  1.133568       1
652  38  1      4       9     19    13.6  1.245488  1.338512       0
653  30  1     12      10     38     8.5  0.171190  3.058810       0
654  28  3      2       0     20     9.4  0.233120  1.646880       1
655  36  1     11       2     33    32.5  1.265550  9.459450       0
656  48  1     15       5     60     2.1  0.321300  0.938700       0
657  31  1     12       9     24     6.6  0.441936  1.142064       0
658  35  1     16      10     57    10.5  1.143135  4.841865       0
659  50  1      4       4     23    12.5  0.140875  2.734125       0
660  42  2     12       9     55    15.0  2.532750  5.717250       0
661  40  1      2       3     28     7.1  0.184884  1.803116       0
662  37  2      0      13     31     0.9  0.118017  0.160983       1
663  31  3      6       8     54     2.8  0.402192  1.109808       0
664  38  1     11      13     35     8.0  1.265600  1.534400       0
665  35  1     15       1     77    10.6  5.501188  2.660812       0
666  44  1     24      10    101     5.6  2.992024  2.663976       0
667  44  2     21      14    113    13.2  3.192024 11.723976       0
668  33  1      0      12     23     0.9  0.077418  0.129582       0
669  35  1      7      14     29     4.9  0.264306  1.156694       0
670  36  3     10       4     43    13.0  0.961480  4.628520       0
671  23  2      3       4     24     6.3  0.551880  0.960120       0
672  27  1      0       7     18    12.8  0.582912  1.721088       0
673  34  1      6       1     20     1.2  0.042480  0.197520       0
674  35  1      0       5     34    11.1  1.369962  2.404038       1
675  24  2      4       4     20     3.7  0.324120  0.415880       0
676  48  1     30       8    101     6.4  1.874560  4.589440       0
677  26  2      8       1     40    11.8  0.443680  4.276320       0
678  40  1      6       9     36     2.1  0.390852  0.365148       1
679  34  1      9       8     48     9.3  0.419616  4.044384       0
680  35  1     17       4     42     3.0  0.093240  1.166760       0
681  30  1      7       2     33    25.4  1.165098  7.216902       1
682  20  1      4       0     14     9.7  0.200984  1.157016       1
683  36  4      1      17     30    11.5  0.324300  3.125700       0
684  21  1      1       1     16     6.3  0.141120  0.866880       0
685  34  1     18      10     53    10.5  0.840315  4.724685       0
686  35  1      7       5     39    16.1  1.701609  4.577391       1
687  35  3      1       4     20     7.9  0.853200  0.726800       0
688  34  1     10       1     33    10.3  2.501664  0.897336       1
689  33  1     12      12     68    10.8  1.365984  5.978016       0
690  30  1      4       2     18    10.7  0.227268  1.698732       0
691  24  2      0       5     16     7.3  0.024528  1.143472       0
692  47  1     31       8    253     7.2  9.308376  8.907624       0
693  53  1      0      26     27    28.9  2.754459  5.048541       1
694  22  3      0       2     20     4.7  0.219020  0.720980       0
695  48  2      6       1     66    12.1  2.315940  5.670060       0
696  36  2      6      15     27     4.6  0.262062  0.979938       1
697  29  2      6       4     21    11.5  0.369495  2.045505       0
698  33  1     15       3     32     7.6  0.491264  1.940736       0
699  45  1     19      22     77     8.4  2.302608  4.165392       0
700  37  1     12      14     44    14.7  2.994684  3.473316       0
701  36  1     16      13     32    10.9  0.544128  2.943872      NA
702  50  1      6      27     21    12.9  1.316574  1.392426      NA
703  40  1      9       9     33    17.0  4.880700  0.729300      NA
704  31  1      5       7     23     2.0  0.046000  0.414000      NA
705  29  1      4       0     24     7.8  0.866736  1.005264      NA
706  25  2      1       3     14     9.9  0.232848  1.153152      NA
707  34  1      4       3     28     9.4  1.058064  1.573936      NA
708  50  1     30       8    150    32.5 13.552500 35.197500      NA
709  27  1      5       5     26     1.2  0.130416  0.181584      NA
710  31  4      7      12     97     6.0  1.827480  3.992520      NA
711  45  1      8      25     27     2.6  0.415584  0.286416      NA
712  35  1     10       8     28     1.3  0.109928  0.254072      NA
713  47  2     27       7    107     6.1  1.638277  4.888723      NA
714  50  3     25       7     94     5.3  1.733736  3.248264      NA
715  37  2     15      11    108    11.8  5.250528  7.493472      NA
716  46  1      7       6     41    23.4  0.585234  9.008766      NA
717  26  4      1       5     92    13.0  6.506240  5.453760      NA
718  33  1     16      12     46     8.1  2.399544  1.326456      NA
719  43  1      8       0     32    19.0  1.234240  4.845760      NA
720  49  2     14      26     63    15.8  0.935676  9.018324      NA
721  44  1      2      15     22     9.6  1.091904  1.020096      NA
722  32  1     12      10     33    11.2  0.794640  2.901360      NA
723  38  1      5       4     20     1.5  0.091500  0.208500      NA
724  52  1     33      23    139     5.6  2.288496  5.495504      NA
725  35  1     10       3     24    21.3  1.083744  4.028256      NA
726  33  4      4      12     22     5.5  0.566280  0.643720      NA
727  35  1     11      12     77     4.7  1.100176  2.518824      NA
728  34  2      9       3     40     1.6  0.373760  0.266240      NA
729  39  1     19      16     53     3.7  0.190217  1.770783      NA
730  31  1      8       4     27     5.4  0.673596  0.784404      NA
731  37  1      5      11     27     9.4  0.418770  2.119230      NA
732  44  1     19       9     40    10.9  0.344440  4.015560      NA
733  30  1      1       1     27    12.3  1.275264  2.045736      NA
734  37  1     18       9     58    10.3  2.867520  3.106480      NA
735  35  1     11       9     40     2.9  0.571880  0.588120      NA
736  43  1      4      11     26     7.1  0.751322  1.094678      NA
737  26  1      0       5     17     5.0  0.141950  0.708050      NA
738  35  1     13       4     42    17.6  0.768768  6.623232      NA
739  24  1      4       0     19    11.0  1.185030  0.904970      NA
740  24  1      4       1     23     4.9  0.242305  0.884695      NA
741  26  3      3       1     40    10.8  1.896480  2.423520      NA
742  34  1     10      12     48     5.1  0.264384  2.183616      NA
743  44  4     18      23     78     1.0  0.564720  0.215280      NA
744  46  1      9       6     72     5.0  0.828000  2.772000      NA
745  40  1     17       5     55    11.4  2.125530  4.144470      NA
746  37  4      2       1     29    15.4  2.782318  1.683682      NA
747  35  3      5      13     30    10.6  1.526400  1.653600      NA
748  46  2     18      18     55     4.4  0.418660  2.001340      NA
749  40  3      5      18     28    10.0  1.262800  1.537200      NA
750  48  2     21      14     86     1.2  0.145512  0.886488      NA
751  53  1     33      25    324     7.0  7.053480 15.626520      NA
752  45  3      9       0     84    13.1  1.276464  9.727536      NA
753  32  3      6      12     22     6.7  0.384714  1.089286      NA
754  43  1     15      21     62     9.4  0.693532  5.134468      NA
755  29  2      3       9     32     9.0  1.071360  1.808640      NA
756  47  2      7      24     49     0.9  0.253575  0.187425      NA
757  21  2      1       0     17    10.5  0.555135  1.229865      NA
758  30  1      0       2     20     5.4  0.622080  0.457920      NA
759  25  3      3       2     54     7.4  1.162836  2.833164      NA
760  27  1      6       2     52    13.8  1.901640  5.274360      NA
761  36  1      4      17     25     4.0  0.144000  0.856000      NA
762  35  1     12       3     30    15.4  1.898820  2.721180      NA
763  33  1     11       6     35    15.9  0.506415  5.058585      NA
764  21  3      0       1     41    19.5  2.366520  5.628480      NA
765  44  1     18       0     61    10.8  2.806488  3.781512      NA
766  37  1     19       7     38    13.5  2.590650  2.539350      NA
767  27  1      5       7     26     6.8  0.548080  1.219920      NA
768  37  2     11      11     47     9.6  1.597248  2.914752      NA
769  48  2      9      22     44     5.9  2.133912  0.462088      NA
770  30  1      4       2     21     3.5  0.228585  0.506415      NA
771  22  4      0       1     25    12.2  1.491450  1.558550      NA
772  39  2     18      18     47     7.6  1.564536  2.007464      NA
773  26  1      5       6     18    15.5  0.574740  2.215260      NA
774  29  2      9       8     30    21.7  3.645600  2.864400      NA
775  47  1     29      20    169     2.2  0.349492  3.368508      NA
776  33  2      5       2     37     8.4  1.028748  2.079252      NA
777  23  2      2       2     48     7.5  0.511200  3.088800      NA
778  25  2      5       5     35    16.5  1.969275  3.805725      NA
779  34  1      4       6     23     5.6  0.616952  0.671048      NA
780  56  1     19      26     66     3.3  0.847242  1.330758      NA
781  32  1      7      10     23     9.8  0.861028  1.392972      NA
782  27  3      0       4     50    14.7  1.043700  6.306300      NA
783  41  2      6       7     36    13.9  1.486188  3.517812      NA
784  30  1      8      11     27    20.3  3.743523  1.737477      NA
785  38  4     13       2    126    13.7  7.612542  9.649458      NA
786  31  1      6       1     45     7.3  0.584730  2.700270      NA
787  37  3     16       8     75     0.1  0.022050  0.052950      NA
788  30  2      2       2     26     3.8  0.248976  0.739024      NA
789  44  2      8      18     43     5.0  0.554700  1.595300      NA
790  25  2      5       3     42    15.5  3.365670  3.144330      NA
791  33  2     10       2     54     3.0  0.119880  1.500120      NA
792  25  1      3       5     31     8.1  0.881361  1.629639      NA
793  45  1     14      26     46     5.1  1.262148  1.083852      NA
794  23  1      6       2     15    12.7  1.375410  0.529590      NA
795  43  1     24      22    254     7.7  7.001764 12.556236      NA
796  38  2     12      14     40     5.1  0.897600  1.142400      NA
797  24  1      1       4     16     7.2  0.877824  0.274176      NA
798  29  2      2       4     16    10.5  0.433440  1.246560      NA
799  40  1     23      16     81    10.9  0.997677  7.831323      NA
800  47  1      3       1     21    15.4  0.067914  3.166086      NA
801  24  1      1       5     16     9.2  0.185472  1.286528      NA
802  35  2      0       6     35    12.4  2.382660  1.957340      NA
803  38  1      1       9     42     9.1  0.890526  2.931474      NA
804  48  1     10       0     70    28.2 10.679340  9.060660      NA
805  35  2     12      12     64    15.0  1.449600  8.150400      NA
806  27  1     11       1     21    11.4  0.914508  1.479492      NA
807  47  3     16       7    266     2.0  2.191840  3.128160      NA
808  31  1      3       5     16    32.3  3.064624  2.103376      NA
809  30  1     12       4     40     7.0  1.248800  1.551200      NA
810  29  2     10       3     61     6.2  0.798002  2.983998      NA
811  26  4      1       6     64    23.3  7.754240  7.157760      NA
812  38  1     21      17     65    16.8  2.533440  8.386560      NA
813  45  1      7      17     29     6.1  0.739442  1.029558      NA
814  29  1      3      10     23     9.3  1.103724  1.035276      NA
815  52  1     17       4     73     8.7  1.054266  5.296734      NA
816  24  1      1       0     20     4.1  0.324720  0.495280      NA
817  33  2      8      13     27     9.8  1.645812  1.000188      NA
818  38  2      0      18     21     4.6  0.612444  0.353556      NA
819  26  1      0       2     15     5.4  0.385560  0.424440      NA
820  26  1      2       5     22     6.4  0.236544  1.171456      NA
821  35  1     16       0     37    17.2  4.212968  2.151032      NA
822  43  1      9       8     66     8.8  2.340624  3.467376      NA
823  45  3      8       1    140    13.9  4.183900 15.276100      NA
824  24  1      5       1     46     3.8  0.529644  1.218356      NA
825  44  3      7      16     78    10.5  3.153150  5.036850      NA
826  29  2      0       7     23     8.0  1.242000  0.598000      NA
827  22  2      0       0     14    17.1  0.241794  2.152206      NA
828  38  1     16       8     37     8.6  0.082732  3.099268      NA
829  46  1      6      19     30    17.6  1.415040  3.864960      NA
830  46  4      7      16     73     1.1  0.555676  0.247324      NA
831  32  1     13      11     25     7.5  0.596250  1.278750      NA
832  39  3     16      10    126     6.8  1.405152  7.162848      NA
833  40  2     15      19    138     4.1  1.222128  4.435872      NA
834  47  1     16      19    110    12.6  5.821200  8.038800      NA
835  28  1     10       1     42     8.6  1.047480  2.564520      NA
836  36  1     19       8     45    12.1  0.920205  4.524795      NA
837  41  2     13       1     93    14.7  9.542358  4.128642      NA
838  31  2     12       8     44     9.6  1.867008  2.356992      NA
839  39  1     20       8    116     4.1  2.240076  2.515924      NA
840  37  1      4      10     24    14.2  0.419184  2.988816      NA
841  35  2     11       1     62    32.4  9.702504 10.385496      NA
842  35  4     10      12     45     8.5  1.040400  2.784600      NA
843  51  4     15      30     26    13.6  2.011984  1.524016      NA
844  36  1      5       2     27     7.0  0.723870  1.166130      NA
845  23  1      3       4     13     3.1  0.045539  0.357461      NA
846  34  1     12      15     32     2.7  0.239328  0.624672      NA
847  32  2     12      11    116     5.7  4.026708  2.585292      NA
848  48  1     13      11     38    10.8  0.722304  3.381696      NA
849  35  2      1      11     24     7.8  0.417456  1.454544      NA
850  37  1     20      13     41    12.9  0.899130  4.389870      NA
> 
> cnames = colnames(numeric_data)
> cnames
[1] "age"      "ed"       "employ"   "address"  "income"   "debtinc"  "creddebt"
[8] "othdebt"  "default" 
> 
> #4.2 splitting the data set into two sets - existing customers and new customers
> 
> #bankloans_existing = bankloans.loc[bankloans.default.isnull() == 0] #isnulll is false
> 
> bankloans_existing = bankloans[which(bankloans$default>=0),]
> bankloans_new = bankloans[-which(bankloans$default>=0),]
> 
> unique(bankloans$default)
[1]  1  0 NA
> 
> 
> #5.Checking for Outliers
> 
> pl1 = ggplot(bankloans_existing,aes(y = age))
> pl1 +stat_boxplot(geom = "errorbar", width=0.5) + geom_boxplot(outlier.colour="red", fill = "grey" ,outlier.shape=18,outlier.size=1, notch=FALSE)+ylim(0,100)
> 
> pl1 = ggplot(bankloans_existing,aes(y = employ))
> pl1 +stat_boxplot(geom = "errorbar", width=0.5) + geom_boxplot(outlier.colour="red", fill = "grey" ,outlier.shape=18,outlier.size=1, notch=FALSE)+ylim(0,100)
> 
> pl1 = ggplot(bankloans_existing,aes(y = income))
> pl1 +stat_boxplot(geom = "errorbar", width=0.5) + geom_boxplot(outlier.colour="red", fill = "grey" ,outlier.shape=18,outlier.size=1, notch=FALSE)+ylim(0,100)
Warning messages:
1: Removed 43 rows containing non-finite values (stat_boxplot). 
2: Removed 43 rows containing non-finite values (stat_boxplot). 
> 
> pl1 = ggplot(bankloans_existing,aes(y = debtinc))
> pl1 +stat_boxplot(geom = "errorbar", width=0.5) + geom_boxplot(outlier.colour="red", fill = "grey" ,outlier.shape=18,outlier.size=1, notch=FALSE)+ylim(0,100)
> 
> pl1 = ggplot(bankloans_existing,aes(y = creddebt))
> pl1 +stat_boxplot(geom = "errorbar", width=0.5) + geom_boxplot(outlier.colour="red", fill = "grey" ,outlier.shape=18,outlier.size=1, notch=FALSE)+ylim(0,100)
> 
> #5.1 Outlier Treatment
> 
> #bankloans_existing$default.quantile(0.95)
> #quantile(bankloans_existing$age,probs=c(0.75))
> #quantile(bankloans_existing$age)
> 
> for(i in cnames){
+ vals = bankloans_existing[,i] %in% boxplot.stats(bankloans_existing[,i])$out #PUTS ALL OUTLIERS IN VALS VARIABLE
+ bankloans_existing[which(vals),i] = NA  #SET ALL OUTLIERS(Present in VALs) TO NA AND THEN IMPUTE
+ }
> 
> #lets check the NA's
> data.frame(apply(bankloans_existing,2,function(x){sum(is.na(x))}))
         apply.bankloans_existing..2..function.x...
age                                               0
ed                                               43
employ                                           10
address                                          14
income                                           40
debtinc                                          14
creddebt                                         55
othdebt                                          48
default                                           0
> 
> #Imputing with KNN
> bankloans_existing = knnImputation(bankloans_existing,k=3)
> 
> # lets check the missing values
> data.frame(apply(bankloans_existing,2,function(x){sum(is.na(x))}))
         apply.bankloans_existing..2..function.x...
age                                               0
ed                                                0
employ                                            0
address                                           0
income                                            0
debtinc                                           0
creddebt                                          0
othdebt                                           0
default                                           0
> 
> #All the missing values have been imputed
> 
> #6 Correlation
> 
> 
> library(corrplot)
corrplot 0.84 loaded
Warning message:
package 'corrplot' was built under R version 3.6.3 
> 
> bankloans_existing.cor = cor(bankloans_existing)
> #corrplot(bankloans_existing.cor)
> palette = colorRampPalette(c("green", "white", "red")) (20)
> heatmap(x = bankloans_existing.cor, col = palette, symm = TRUE)
> 
> 
> #Indicator variable unique types
> table(bankloans_existing$default)

  0   1 
517 183 
> #We can see we have 517 0's and 183 1's
> 
> 
>  #Multi Collinearity Check
>   library(usdm)
>   vif(bankloans_existing[,-1])
  Variables      VIF
1        ed 1.228912
2    employ 2.462150
3   address 1.163820
4    income 4.356178
5   debtinc 4.512964
6  creddebt 2.434749
7   othdebt 4.334571
8   default 1.341329
>  
>   vifcor(bankloans_existing[,-1], th = 0.9)
No variable from the 8 input variables has collinearity problem. 

The linear correlation coefficients ranges between: 
min correlation ( debtinc ~ address ):  0.0131534 
max correlation ( income ~ employ ):  0.7034492 

---------- VIFs of the remained variables -------- 
  Variables      VIF
1        ed 1.228912
2    employ 2.462150
3   address 1.163820
4    income 4.356178
5   debtinc 4.512964
6  creddebt 2.434749
7   othdebt 4.334571
8   default 1.341329
> 
>   #Backup
>   #vm=bankloans_existing
>   #bankloans_existing=vm
> #Split the data into Train and test
>   
>   #### Trial 
>   #bankloans_existing$default <- as.factor((bankloans_existing$default))
>   #unique(bankloans_existing$default)
>   ####
>   
>   set.seed(1000) #Random.seed is an integer vector, containing the random number generator (RNG) state for random number generation in R. It can be saved and restored, but should not be altered by the user.
>   library(caret)
>   library(Rcpp)
>   tr.idx = createDataPartition(bankloans_existing$default,p=0.80,list = FALSE) # 80% in trainin and 20% in Validation Datasets
>   train_bankloans_existing = bankloans_existing[tr.idx,] #new variable train_data which will have 80% of data  560
>   test_bankloans_existing = bankloans_existing[-tr.idx,] #new variable test_data which will have 20% of data   140
>   table(train_bankloans_existing$default) #total 560

  0   1 
405 155 
> 
> #**********************************************************************************************************************************************************  
> ### Logistic Regression    
>   #library(rpart)
>   ##rpart for regression
>   
>   ## Model Building
>   fit = glm(default ~ ., data = train_bankloans_existing,family = "binomial")  
> 
>   #Features and their coefficients
>   mylogit <- glm(default ~ address + age + creddebt + debtinc + ed +employ + income + othdebt, data = train_bankloans_existing) 
>   summary(mylogit)

Call:
glm(formula = default ~ address + age + creddebt + debtinc + 
    ed + employ + income + othdebt, data = train_bankloans_existing)

Deviance Residuals: 
    Min       1Q   Median       3Q      Max  
-0.7792  -0.2696  -0.0997   0.2992   1.0305  

Coefficients:
             Estimate Std. Error t value Pr(>|t|)    
(Intercept) -0.007756   0.100879  -0.077  0.93875    
address     -0.008675   0.003220  -2.694  0.00727 ** 
age          0.002561   0.002888   0.887  0.37572    
creddebt     0.053218   0.025782   2.064  0.03947 *  
debtinc      0.032422   0.005434   5.967 4.33e-09 ***
ed           0.067623   0.025674   2.634  0.00868 ** 
employ      -0.016973   0.004117  -4.122 4.33e-05 ***
income       0.001034   0.001700   0.609  0.54304    
othdebt     -0.053991   0.017830  -3.028  0.00258 ** 
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1

(Dispersion parameter for gaussian family taken to be 0.1483754)

    Null deviance: 112.098  on 559  degrees of freedom
Residual deviance:  81.755  on 551  degrees of freedom
AIC: 531.65

Number of Fisher Scoring iterations: 2

>   
>   #Predict for new test cases
>   #bankloans_test_pred_log = predict(fit, test_bankloans_existing[,-9])
>   bankloans_test_pred_log = predict(fit, newdata = test_bankloans_existing[,-9],type="response")
>   #bankloans_test_pred_log has the probability for each cell to be 0 or 1, Now convert it into 1 and 0.
>  
>    #Convert prob into 1 and 0
>   bankloans_test_pred_log= ifelse(bankloans_test_pred_log>0.224,1,0) #if >0.5 then 1 else 0(i.e less thn 0.5)
>   
>   bankloans_test_pred_log
 12  16  19  20  34  38  39  50  60  61  62  63  66  68  71  75  78  88  92  97 
  0   0   0   0   1   1   1   0   0   0   0   1   1   0   1   0   0   1   1   0 
103 104 106 107 108 117 121 123 127 128 132 134 137 138 139 144 153 154 162 178 
  0   0   0   0   1   0   0   1   0   0   1   0   1   0   0   0   1   0   1   0 
183 202 210 212 220 225 226 228 229 231 232 234 241 245 256 272 277 278 280 284 
  0   0   0   1   1   1   0   0   1   1   0   0   1   1   0   0   1   0   0   1 
286 289 290 305 312 322 323 328 341 345 354 361 363 364 371 377 385 388 390 394 
  0   0   0   1   0   1   0   1   1   0   0   0   1   0   0   0   0   0   0   1 
398 411 415 416 418 425 441 448 452 461 462 463 465 467 468 474 476 485 486 490 
  1   0   1   0   0   1   0   1   1   0   1   0   1   1   0   1   0   1   0   0 
492 501 507 513 514 517 523 527 537 545 551 556 568 588 589 592 594 598 599 602 
  1   1   0   0   0   0   0   0   0   0   0   0   0   0   0   1   1   1   1   0 
612 615 620 623 640 643 644 650 651 653 655 659 663 664 668 670 676 685 692 696 
  0   0   1   0   0   1   0   1   0   0   0   1   0   0   0   1   0   0   0   0 
>   range(bankloans_test_pred_log)
[1] 0 1
>   unique(bankloans_test_pred_log)
[1] 0 1
>   length(bankloans_test_pred_log)
[1] 140
> ########### To Predict and create confusion matrix :      #########################  
>   #ConfusionMatrix
>   cm=table(test_bankloans_existing$default,bankloans_test_pred_log)# 
>   cm
   bankloans_test_pred_log
     0  1
  0 80 32
  1 10 18
>   
>   
>   #Confusion matrix variables
>   tp=cm[2,2];tn=cm[1,1];fp=cm[1,2];fn=cm[2,1];total = tp + tn + fp +fn
>   
>   #find precision score : tp/(tp+fp)
>   ps = tp/(tp+fp) # Rejected this : cm[1,1]/sum(cm[1,1:2]) #0.91
>   print("Precision for Logistic regression :")
[1] "Precision for Logistic regression :"
>   ps
[1] 0.36
>   
>   # Recall: tp/(tp + fn):
>   recall =tp/(tp + fn) #Rejected this : cm[1,1]/sum(cm[1:2,1]) 0.86
>   print("Recall for Logistic regression :")
[1] "Recall for Logistic regression :"
>   recall
[1] 0.6428571
>   
>   # F-Score: 2 * precision * recall /(precision + recall):
>   FScore=  2 * ps * recall /(ps + recall) #0.891
>   print("Fscore for Logistic regression :")
[1] "Fscore for Logistic regression :"
>   FScore
[1] 0.4615385
>   
>   #find the overall accuracy of model : (TP+TN)/total
>   acc = (tp+tn)/total
>   print("Accuracy for Logistic regression :")
[1] "Accuracy for Logistic regression :"
>   acc
[1] 0.7
> #**********************************************************************************************************************************************************
>  
>   ### Random Forest  
>   
>   
>   ## Model Building
>   RF = randomForest(default ~ ., data = train_bankloans_existing,importance=TRUE,ntree=500)  
Warning message:
In randomForest.default(m, y, ...) :
  The response has five or fewer unique values.  Are you sure you want to do regression?
>   
>   #Features and their coefficients
>   mylogitRF <- glm(default ~ address + age + creddebt + debtinc + ed +employ + income + othdebt, data = train_bankloans_existing) 
>   summary(mylogitRF)

Call:
glm(formula = default ~ address + age + creddebt + debtinc + 
    ed + employ + income + othdebt, data = train_bankloans_existing)

Deviance Residuals: 
    Min       1Q   Median       3Q      Max  
-0.7792  -0.2696  -0.0997   0.2992   1.0305  

Coefficients:
             Estimate Std. Error t value Pr(>|t|)    
(Intercept) -0.007756   0.100879  -0.077  0.93875    
address     -0.008675   0.003220  -2.694  0.00727 ** 
age          0.002561   0.002888   0.887  0.37572    
creddebt     0.053218   0.025782   2.064  0.03947 *  
debtinc      0.032422   0.005434   5.967 4.33e-09 ***
ed           0.067623   0.025674   2.634  0.00868 ** 
employ      -0.016973   0.004117  -4.122 4.33e-05 ***
income       0.001034   0.001700   0.609  0.54304    
othdebt     -0.053991   0.017830  -3.028  0.00258 ** 
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1

(Dispersion parameter for gaussian family taken to be 0.1483754)

    Null deviance: 112.098  on 559  degrees of freedom
Residual deviance:  81.755  on 551  degrees of freedom
AIC: 531.65

Number of Fisher Scoring iterations: 2

>   
>   #Predict for new test cases
>   #bankloans_test_pred_log = predict(fit, test_bankloans_existing[,-9])
>   bankloans_test_pred_logRF = predict(RF, newdata = test_bankloans_existing[,-9],type="response")
>   #bankloans_test_pred_log has the probability for each cell to be 0 or 1, Now convert it into 1 and 0.
>   bankloans_test_pred_logRF
         12          16          19          20          34          38 
0.385247619 0.063833333 0.033133333 0.253300000 0.378133333 0.413233333 
         39          50          60          61          62          63 
0.583366667 0.023166667 0.234100000 0.067200000 0.126800000 0.515077778 
         66          68          71          75          78          88 
0.433933333 0.099333333 0.774166667 0.015433333 0.172866667 0.526366667 
         92          97         103         104         106         107 
0.497966667 0.204833333 0.061666667 0.021033333 0.085300000 0.332366667 
        108         117         121         123         127         128 
0.310566667 0.096633333 0.072100000 0.658666667 0.339500000 0.083633333 
        132         134         137         138         139         144 
0.248166667 0.190700000 0.627685714 0.125566667 0.022666667 0.053700000 
        153         154         162         178         183         202 
0.449700000 0.060300000 0.193166667 0.065200000 0.024766667 0.085633333 
        210         212         220         225         226         228 
0.151400000 0.254966667 0.297733333 0.443633333 0.294000000 0.167966667 
        229         231         232         234         241         245 
0.310666667 0.410633333 0.123633333 0.138700000 0.684600000 0.452100000 
        256         272         277         278         280         284 
0.119500000 0.198433333 0.694666667 0.097566667 0.225833333 0.285800000 
        286         289         290         305         312         322 
0.048433333 0.008133333 0.042466667 0.358033333 0.158800000 0.336866667 
        323         328         341         345         354         361 
0.061333333 0.254700000 0.430600000 0.091100000 0.073500000 0.042366667 
        363         364         371         377         385         388 
0.425233333 0.186133333 0.083500000 0.009100000 0.286366667 0.100900000 
        390         394         398         411         415         416 
0.028866667 0.611733333 0.247066667 0.066033333 0.648433333 0.041600000 
        418         425         441         448         452         461 
0.117800000 0.514300000 0.144133333 0.238300000 0.144966667 0.111000000 
        462         463         465         467         468         474 
0.651533333 0.145900000 0.660166667 0.516933333 0.105000000 0.502533333 
        476         485         486         490         492         501 
0.036200000 0.287633333 0.145433333 0.070100000 0.678800000 0.275080952 
        507         513         514         517         523         527 
0.058966667 0.278600000 0.074933333 0.056066667 0.097500000 0.032166667 
        537         545         551         556         568         588 
0.126800000 0.097566667 0.430850000 0.051633333 0.190266667 0.199533333 
        589         592         594         598         599         602 
0.033366667 0.580514286 0.160200000 0.696466667 0.189800000 0.127433333 
        612         615         620         623         640         643 
0.405633333 0.105933333 0.285733333 0.050633333 0.139266667 0.521933333 
        644         650         651         653         655         659 
0.214633333 0.568500000 0.166233333 0.028766667 0.147133333 0.286900000 
        663         664         668         670         676         685 
0.129700000 0.064733333 0.445183333 0.230833333 0.087200000 0.013900000 
        692         696 
0.056733333 0.065533333 
>   
>   #Convert prob into 1 and 0
>   bankloans_test_pred_logRF= ifelse(bankloans_test_pred_logRF>0.224,1,0) #if >0.5 then 1 else 0(i.e less thn 0.5)
>   
>   
>   cmRF=table(test_bankloans_existing$default,bankloans_test_pred_logRF)# USE RF HERE MAYBE
>   cmRF
   bankloans_test_pred_logRF
     0  1
  0 76 36
  1  6 22
>   
>   #Confusion matrix variables
>   tpRF=cmRF[2,2];tnRF=cmRF[1,1];fpRF=cmRF[1,2];fnRF=cmRF[2,1];totalRF = tpRF + tnRF + fpRF +fnRF
>   
>   #precision score : tp/(tp+fp)
>   psRF = tpRF/(tpRF+fpRF) 
>   print("Precision for Random Forest :")
[1] "Precision for Random Forest :"
>   psRF
[1] 0.3793103
>   
>   # Recall
>   recallRF =tpRF/(tpRF + fnRF) 
>   print("Recall for Random Forest :")
[1] "Recall for Random Forest :"
>   recallRF
[1] 0.7857143
>   
>   # F-Score: 2 * precision * recall /(precision + recall):
>   FScoreRF=  2 * psRF * recallRF /(psRF + recallRF) #
>   print("Fscore for Random Forest :")
[1] "Fscore for Random Forest :"
>   FScoreRF
[1] 0.5116279
>   
>   #find the overall accuracy of model : (TP+TN)/total
>   accRF = (tpRF+tnRF)/totalRF
>   print("Accuracy for Random Forest :")
[1] "Accuracy for Random Forest :"
>   accRF
[1] 0.7
>   
>   
> #**********************************************************************************************************************************************************
>   #Decision Tree
>   
>   DT = rpart(default ~ ., data = train_bankloans_existing, method = "class")  
>   
>   #Features and their coefficients
>   mylogitDT <- glm(default ~ address + age + creddebt + debtinc + ed +employ + income + othdebt, data = train_bankloans_existing) 
>   summary(mylogitDT)

Call:
glm(formula = default ~ address + age + creddebt + debtinc + 
    ed + employ + income + othdebt, data = train_bankloans_existing)

Deviance Residuals: 
    Min       1Q   Median       3Q      Max  
-0.7792  -0.2696  -0.0997   0.2992   1.0305  

Coefficients:
             Estimate Std. Error t value Pr(>|t|)    
(Intercept) -0.007756   0.100879  -0.077  0.93875    
address     -0.008675   0.003220  -2.694  0.00727 ** 
age          0.002561   0.002888   0.887  0.37572    
creddebt     0.053218   0.025782   2.064  0.03947 *  
debtinc      0.032422   0.005434   5.967 4.33e-09 ***
ed           0.067623   0.025674   2.634  0.00868 ** 
employ      -0.016973   0.004117  -4.122 4.33e-05 ***
income       0.001034   0.001700   0.609  0.54304    
othdebt     -0.053991   0.017830  -3.028  0.00258 ** 
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1

(Dispersion parameter for gaussian family taken to be 0.1483754)

    Null deviance: 112.098  on 559  degrees of freedom
Residual deviance:  81.755  on 551  degrees of freedom
AIC: 531.65

Number of Fisher Scoring iterations: 2

>   
>   #Predict for new test cases
>   bankloans_test_pred_logDT = predict(DT, newdata = test_bankloans_existing[,-9], type = "class")
>   #bankloans_test_pred_log has the probability for each cell to be 0 or 1, Now convert it into 1 and 0.
>   bankloans_test_pred_logDT
 12  16  19  20  34  38  39  50  60  61  62  63  66  68  71  75  78  88  92  97 
  0   0   0   0   1   0   0   0   0   0   0   1   0   0   1   0   0   1   0   0 
103 104 106 107 108 117 121 123 127 128 132 134 137 138 139 144 153 154 162 178 
  0   0   0   0   0   0   0   1   1   0   1   1   1   0   0   0   1   0   0   0 
183 202 210 212 220 225 226 228 229 231 232 234 241 245 256 272 277 278 280 284 
  0   0   0   0   1   1   0   0   0   1   0   0   1   1   0   0   0   0   0   0 
286 289 290 305 312 322 323 328 341 345 354 361 363 364 371 377 385 388 390 394 
  0   0   0   0   0   1   0   0   0   0   0   0   1   0   0   0   0   0   0   1 
398 411 415 416 418 425 441 448 452 461 462 463 465 467 468 474 476 485 486 490 
  0   0   1   0   0   1   1   0   0   0   1   0   1   0   0   0   0   0   0   0 
492 501 507 513 514 517 523 527 537 545 551 556 568 588 589 592 594 598 599 602 
  1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   1 
612 615 620 623 640 643 644 650 651 653 655 659 663 664 668 670 676 685 692 696 
  1   0   1   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0 
Levels: 0 1
>   #Convert prob into 1 and 0
>   #bankloans_test_pred_logDT= ifelse(bankloans_test_pred_logDT>0.224,1,0) #if >0.5 then 1 else 0(i.e less thn 0.5)
>   bankloans_test_pred_logDT
 12  16  19  20  34  38  39  50  60  61  62  63  66  68  71  75  78  88  92  97 
  0   0   0   0   1   0   0   0   0   0   0   1   0   0   1   0   0   1   0   0 
103 104 106 107 108 117 121 123 127 128 132 134 137 138 139 144 153 154 162 178 
  0   0   0   0   0   0   0   1   1   0   1   1   1   0   0   0   1   0   0   0 
183 202 210 212 220 225 226 228 229 231 232 234 241 245 256 272 277 278 280 284 
  0   0   0   0   1   1   0   0   0   1   0   0   1   1   0   0   0   0   0   0 
286 289 290 305 312 322 323 328 341 345 354 361 363 364 371 377 385 388 390 394 
  0   0   0   0   0   1   0   0   0   0   0   0   1   0   0   0   0   0   0   1 
398 411 415 416 418 425 441 448 452 461 462 463 465 467 468 474 476 485 486 490 
  0   0   1   0   0   1   1   0   0   0   1   0   1   0   0   0   0   0   0   0 
492 501 507 513 514 517 523 527 537 545 551 556 568 588 589 592 594 598 599 602 
  1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   1 
612 615 620 623 640 643 644 650 651 653 655 659 663 664 668 670 676 685 692 696 
  1   0   1   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0 
Levels: 0 1
>   
>   cmDT=table(test_bankloans_existing$default,bankloans_test_pred_logDT)# 
>   cmDT
   bankloans_test_pred_logDT
     0  1
  0 94 18
  1 17 11
>   
>   #Confusion matrix variables
>   tpDT=cmDT[2,2];tnDT=cmDT[1,1];fpDT=cmDT[1,2];fnDT=cmDT[2,1];totalDT = tpDT + tnDT + fpDT +fnDT
>   
>   #precision score : tp/(tp+fp)
>   psDT = tpDT/(tpDT+fpDT) 
>   psDT
[1] 0.3793103
>   
>   # Recall
>   recallDT = tpDT/(tpDT + fnDT) 
>   recallDT
[1] 0.3928571
>   
>   # F-Score: 2 * precision * recall /(precision + recall):
>   FScoreDT=  2 * psDT * recallDT /(psDT + recallDT) #
>   FScoreDT
[1] 0.3859649
>   
>   #find the overall accuracy of model : (TP+TN)/total
>   accDT = (tpDT+tnDT)/totalDT
>   accDT
[1] 0.75
>   
> #**********************************************************************************************************************************************************
>   
>   #MODEL Evaluation
>   # Logistic regression 1.precision Score :0.36   2.Recall :0.64    3. F-Score :0.46     4.Accuracy : 0.70
>   
>   #Random Forest        1.precision Score : 0.39  2.Recall : 0.78   3. F-Score :0.52    4.Accuracy : 0.71
>    
>   #Decision Tree        1.precision Score : 0.37  2.Recall :0.39    3. F-Score :0.38   4.Accuracy :0.75
>   
>   #Model Selection and Business Insights
>         #Based on the F1-score (harmonic mean of precision and recall), Random Forest model with f1 score (for positive labels - default customers) of :0.52  is giving better results than Logistic Regression model with f1 score of 0.46 And Better than Decision Tree 0.38. -So we will use the Ransom Forest model to predict the credit worthiness of the customers 
>          #We will Predict the credit risk for remainimg 150 customers using the logistic model with cutoff as 0.224 
>  
> #**********************************************************************************************************************************************************
>   bankloans_new_matrix2 = as.matrix(sapply(bankloans_new,as.numeric))
>   #bankloans_new$Predicted_default = bankloans_test_pred_logRF
>   
>   # Saving the trained model
>   saveRDS(RF, "./final_prediction_using_RF.rds")
>   
>   # loading the saved model
>   super_model <- readRDS("./final_prediction_using_RF.rds")
>   print(super_model)

Call:
 randomForest(formula = default ~ ., data = train_bankloans_existing,      importance = TRUE, ntree = 500) 
               Type of random forest: regression
                     Number of trees: 500
No. of variables tried at each split: 2

          Mean of squared residuals: 0.1531053
                    % Var explained: 23.51
>   
>   # Lets now predict on test dataset
>   predict_default = predict(super_model,bankloans_new_matrix2)
>   
>   #
>   bankloans_new$predicted_default = predict_default
>   bankloans_new$predicted_default= ifelse(bankloans_new$predicted_default>0.224,1,0)
>   bankloans_new$predicted_default
  [1] 0 1 1 0 1 1 1 1 0 0 0 0 0 0 0 1 1 0 1 0 0 0 0 0 1 0 0 0 0 0 0 0 1 0 0 0 1
 [38] 0 1 1 1 0 0 0 0 1 1 0 1 0 0 1 0 0 1 0 1 1 1 1 0 1 0 1 1 1 0 0 1 0 1 0 1 1
 [75] 0 0 1 1 0 0 0 1 1 1 1 0 0 1 0 1 0 1 0 1 0 0 1 1 0 1 1 1 0 1 0 1 0 1 0 0 1
[112] 0 0 0 0 1 1 1 1 1 1 0 1 0 1 1 1 0 1 0 0 0 0 0 0 0 1 0 0 1 1 0 1 0 1 0 0 0
[149] 0 0
>   
>   # Now lets write(save) the predicted fare_amount in disk as .csv format 
>   write.csv(bankloans_new,"Predicted_default.csv",row.names = FALSE)
>   
>   
>   
>   
>   
>   
>   
>   
>   
>   
>   
>   
>   
>   
>   
>   
>   
>   
>   
>   
>   
>   
>   
>   
>   
>    
> 
> proc.time()
   user  system elapsed 
   5.03    1.12    9.17 
